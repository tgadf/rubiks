""" Rotation and Turn Convension Class """__all__ = ["Turn", "PlaneRotation", "GlobalRotation", "RotationTurn"]import numpy as npclass Turn:    def __repr__(self):        return f"Turn(degrees={self.degrees})"            def __init__(self, n_turns):        assert isinstance(n_turns, int) and n_turns <= 2 and n_turns > -2, f"invalid turns [{n_turns}]"        self.n_turns = n_turns        self.degrees = n_turns * 90    def __eq__(self, turn) -> 'bool':        return self.n_turns == turn.n_turns    def __hash__(self):        return hash((self.n_turns))        class PlaneRotation:    def __repr__(self):        return f"PlaneRotation(axis={self.axis}, plane={self.plane})"            def __init__(self, axis: str, plane: int):        # assert axis in ["x", "y", "z"]        self.axis = axis        self.plane = plane    def __eq__(self, plane_rot) -> 'bool':        return self.axis == plane_rot.axis and self.plane == plane_rot.plane    def __hash__(self):        return hash((self.axis, self.plane))    class GlobalRotation:    def __repr__(self):        return f"GlobalRotation(axis={self.axis})"            def __init__(self, axis: str):        # assert axis in ["x", "y", "z"]        self.axis = axis        def __eq__(self, global_rot) -> 'bool':        return self.axis == global_rot.axis    def __hash__(self):        return hash((self.axis))class RotationTurn:    def __repr__(self):        return f"RotationTurn(rot={self.rot}, turn={self.turn})"            def __init__(self, rot: GlobalRotation | PlaneRotation, turn: Turn):        assert isinstance(rot, (GlobalRotation, PlaneRotation)), f"invalid rot [{rot}]"        assert isinstance(turn, Turn), f"invalid turn [{turn}]"        self.rot = rot        self.turn = turn        def __eq__(self, rot_turn) -> 'bool':        return self.rot == rot_turn.rot and self.turn == rot_turn.turn    def __hash__(self):        return hash((self.rot, self.turn))            def getRotMat(self) -> 'np.ndarray':        return eval(f"R{self.rot.axis}({self.turn.degrees})")