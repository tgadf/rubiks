""" Cube surface container class """__all__ = ["CubeSurface", "get_cube_surface", "get_cube_surface_by_pos"]import numpy as npfrom .axis import Axisclass CubeSurface:    def __repr__(self):        return f"CubeSurface(unit={self.unit_vector})"            def __init__(self, axis, polarity):        assert polarity in ['-', '+'], f"invalid polarity [{polarity}]"        ax = Axis()        ax.assertAxis(axis)        unit_vector = ax.get_unit_vector(axis, polarity)        self.axis = axis        self.polarity = polarity        self.unit_vector = unit_vector        sid = self.ax.get_axis_pos(axis)        self.sid = sid if polarity == "+" else sid + len(self.ax.axes)            def get_sid(self):        return self.sid    def __eq__(self, cube_surface) -> 'bool':        return np.array_equal(self.unit_vector, cube_surface.unit_vector)    def __hash__(self):        return hash(tuple(self.unit_vector))    def get_cube_surface(axis, polarity):    return CubeSurface(axis, polarity)    def get_cube_surface_by_pos(pos):    assert isinstance(pos, int) and pos >= 0 and pos <= 5, f"invalid pos [{pos}]"    ax = Axis()    polarity = "+" if pos < len(ax.axes) else "-"    axis = ax.axes[pos % len(ax.axes)]    return CubeSurface(axis, polarity)