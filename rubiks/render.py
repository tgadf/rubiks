""" Rending Rubik's Cube State """__all__ = ["RubiksCubeRender"]import matplotlib.pyplot as pltfrom matplotlib.patches import Rectangleimport mpl_toolkits.mplot3d.art3d as art3dclass RubiksCubeRender:    def __repr__(self):        return f"RubiksCubeRender({self.rc})"            def __init__(self, rc):        self.rc = rc    def render(self, elev=30, azim=-60):        def get_tiles():            surfaces = self.rc.cube.get_surfaces()            cube_surfaces = surfaces.keys()            views = {'y': list(zip(['front', 'back'], [-1, 1])),                     'x': list(zip(['left', 'right'], [-1, 1])),                     'z': list(zip(['bottom', 'top'], [-1, 1]))}            views = {side: [axis, pol] for axis, sidedata in views.items() for side, pol in sidedata}            viewdefs = {}            for side, (axis, pol) in views.items():                view = next(iter([cs for cs in cube_surfaces if cs.axis == axis and sum(cs.unit_vector) == pol]))                viewdefs[side] = view                            axlim = (max(self.dim), -max(self.dim))            tiles = []            for side, surface in viewdefs.items():                faces = surfaces[surface]                alpha = 1.0                for face in faces:                    xy = tuple([face.center[col] - 0.5 for axis, col in self.cube.axis_col_map.items() if axis != surface.axis])                    z = face.center[self.cube.axis_col_map[surface.axis]]                    zdir = surface.axis                    axlim = tuple([min([z, axlim[0]]), max([z, axlim[1]])])                    color = face.getAttr('color')                    tiles.append([xy, color, alpha, z, zdir])                    return tiles, axlim            def set_axlim(ax, axlim):            ax.set_xlim(axlim)            ax.set_xlabel("x-axis")            ax.set_ylim(axlim)            ax.set_ylabel("y-axis")            ax.set_zlim(axlim)            ax.set_zlabel("z-axis")            ax.zaxis.labelpad = -0.7            w = 4        fig = plt.figure(figsize=(w, w * 3 / 4), dpi=80)        ax = fig.add_subplot(projection='3d')        tiles, axlim = get_tiles()        for xy, color, alpha, z, zdir in tiles:            tile = Rectangle(xy, 1, 1, lw=0.25, facecolor=color, edgecolor='black', alpha=alpha)            ax.add_patch(tile)            art3d.pathpatch_2d_to_3d(tile, z=z, zdir=zdir)            set_axlim(ax, axlim)        ax.view_init(elev=elev, azim=azim)                    plt.axis('off')            elev_title = "Top (z)" if elev >= 0 else "Bottom (z)"        azim_title = "Front (-y) Right (+x)" if azim < 0 else "Back-Left"        title = f"{elev_title} ; {azim_title} View"                plt.title(title)        plt.show()