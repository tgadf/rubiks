""" Basic axis convention class """__all__ = ["Axis"]import numpy as npclass Axis:    def __repr__(self):        return f"Axis(x-hat={self.x_hat}, y-hat={self.y_hat}, z-hat={self.z_hat})"            def __init__(self, test=False):        """        Axis convention for tiles and rotations (i.e., êx x êy = êz)           +y            |            |            |            /--------- +x           /          /        +z        """                self.axes = ['x', 'y', 'z']        self.x_hat = np.array([1, 0, 0])        self.y_hat = np.array([0, 1, 0])        self.z_hat = np.cross(self.x_hat, self.y_hat)                if test is True:            self.test()                def test(self):        np.testing.assert_almost_equal(np.cross(self.x_hat, self.y_hat), self.z_hat)        np.testing.assert_almost_equal(np.cross(-self.z_hat, -self.y_hat), -self.x_hat)                def assertAxis(self, axis):        assert isinstance(axis, str) and axis in self.axis, f"Invalid axis [{axis}]"            def get_axis_col(self):        return dict(zip(self.axes), range(len(self.axes)))        def get_unit_vector(self, axis, polarity):        self.assertAxis(axis)        unit_vector = getattr(self, f"{axis.lower()}_hat")        polarity = eval(f"{polarity}1")        unit_vector *= polarity        return unit_vector    def rotate(self, mat):        self.x_hat = mat.dot(self.x_hat)        self.y_hat = mat.dot(self.y_hat)        self.z_hat = mat.dot(self.z_hat)